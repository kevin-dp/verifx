import org.verifx.otproofs.ListOT

object Op {
  enum Op {
    Insert(p: Int, c: Int) |
    Delete(p: Int) |
    Identity()
  }
}

/*
 * Implementation of the transformation functions proposed by (Sun et al., 1998)
 * The transformation functions were modified for character insertions,
 * as described in "Proving Correctness of Transformation Functions in Real-Time Groupware"
 * by Abdessamad Imine, Pascal Molli, Gérald Oster and Michaël Rusinowitch
 */
object Sun extends ListOT[Int, Op] {
  def isInsert(x: Op) = x match {
    case Insert(_, _) => true
    case _ => false
  }

  def isDelete(x: Op) = x match {
    case Delete(_) => true
    case _ => false
  }

  def getPosition(x: Op): Int = x match {
    case Insert(p, _) => p
    case Delete(p) => p
    case Identity() => -1 // should not happen
  }

  def getValue(x: Op): Int = x.asInstanceOf[Insert].c

  def Tii(op1: Op, op2: Op): Op = {
    val x = op1.asInstanceOf[Insert]
    val y = op2.asInstanceOf[Insert]
    val p1 = x.p; val c1 = x.c
    val p2 = y.p; val c2 = y.c
    if (p1 < p2)
      x
    else
      new Insert(p1 + 1, c1)
  }

  def Tid(op1: Op, op2: Op): Op = {
    val x = op1.asInstanceOf[Insert]
    val y = op2.asInstanceOf[Delete]
    if (x.p <= y.p)
      x
    else
      new Insert(x.p - 1, x.c)
  }

  def Tdi(op1: Op, op2: Op): Op = {
    val x = op1.asInstanceOf[Delete]
    val y = op2.asInstanceOf[Insert]
    if (x.p < y.p)
      x
    else
      new Delete(x.p + 1)
  }

  def Tdd(op1: Op, op2: Op): Op = {
    val x = op1.asInstanceOf[Delete]
    val y = op2.asInstanceOf[Delete]
    if (x.p < y.p)
      x
    else if (x.p > y.p)
      new Delete(x.p - 1)
    else
      new Identity()
  }

  // Checks if operation `op` can be executed on `state`
  override def enabled(op: Op, lst: LList[Int]): Boolean = op match {
    case Delete(p) =>
      p >= 0 && p < lst.size && lst.wellFormed()
    case Insert(p, c) =>
      p >= 0 && p <= lst.size && lst.wellFormed()
    case _: Identity =>
      true
  }
}
