import org.verifx.crdtproofs.lemmas.CvRDT

/*
 * Defines a correctness proof for state-based CRDTs.
 * A state-based CRDT guarantees convergence iff the merge function is:
 *  - commutative
 *      ∀x,y :
 *        reachable(x) /\ reachable(y) /\ compatible(x,y) =>
 *          merge(x, y) == merge(y, x) /\ reachable(merge(x, y))
 *  - idempotent
 *      ∀x : reachable(x) =>
 *             merge(x, x) == x
 *  - associative
 *      ∀x,y,z : reachable(x) /\ reachable(y) /\ reachable(z) /\
 *                 compatible(x,y) /\ compatible(x, z) /\ compatible(y, z) =>
 *                   merge(merge(x, y), z) == merge(x, merge(y, z)) /\
 *                   reachable(merge(merge(x, y), z))
 *
 * The `reachable` and `compatible` predicates are data type dependent.
 * `reachable` checks the validity of the state (i.e. it should be reachable starting from the initial state and applying only supported operations).
 * `compatible` checks that two states are compatible.
 *  For example, an LWWRegister keeps a value and a timestamp.
 *  Since timestamps are unique, we know that two registers that have the same timestamp must have the same value.
 *  Hence, if two registers have the same timestamp but different values they are not compatible since this cannot occur in practice.
 *
 *  In addition to the 3 correctness criteria above, the `compatible` predicate should commute (i.e. the outcome should not depend on the order of the arguments).
 */
trait CvRDTProof[T <: CvRDT[T]] {
  proof is_a_CvRDT {
    forall(x: T, y: T, z: T) {
      ( x.reachable() && y.reachable() && z.reachable() &&
          x.compatible(y) && x.compatible(z) && y.compatible(z) ) =>: {
        x.merge(x).equals(x) && // idempotent
        x.merge(y).equals(y.merge(x)) && // commutative
        x.merge(y).merge(z).equals(x.merge(y.merge(z))) && // associative
        x.merge(y).reachable() && // merged state is reachable
        x.merge(y).merge(z).reachable() &&
        x.compatible(y) == y.compatible(x) // compatible commutes
      }
    }
  }

  proof mergeCommutative {
    forall (x: T, y: T) {
      (x.reachable() && y.reachable() && x.compatible(y)) =>: {
        x.merge(y).equals(y.merge(x)) &&
        x.merge(y).reachable()
      }
    }
  }

  proof mergeIdempotent {
    forall (x: T) {
      x.reachable() =>: x.merge(x).equals(x)
    }
  }

  proof mergeAssociative {
    forall (x: T, y: T, z: T) {
      ( x.reachable() && y.reachable() && z.reachable() &&
          x.compatible(y) && x.compatible(z) && y.compatible(z) ) =>: {
        x.merge(y).merge(z).equals(x.merge(y.merge(z))) &&
        x.merge(y).merge(z).reachable()
      }
    }
  }

  proof compareCorrect {
    forall (x: T, y: T) {
      x.equals(y) == (x == y)
    }
  }
}
