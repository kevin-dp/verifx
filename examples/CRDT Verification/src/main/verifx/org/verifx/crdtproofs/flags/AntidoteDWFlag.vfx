import org.verifx.crdtproofs.LamportClock
import org.verifx.crdtproofs.lemmas.CmRDTProof

object AntidoteDWFlag {
  enum AntidoteDWFlagOp {
    Enable() | Disable()
  }
}

class AntidoteDWFlagMsg(seenTokens: Set[LamportClock], newEnableTokens: Set[LamportClock], newDisableTokens: Set[LamportClock], timestamp: LamportClock)

/*
 * Implementation of the Antidote DW-Flag.
 * This implementation assumes that every replica has a unique ID and uses a Lamport clock to generate unique tokens.
 * The Antidote implementation does its best to generate unique tokens by generating some random bytes.
 */
class AntidoteDWFlag(enableTokens: Set[LamportClock], disableTokens: Set[LamportClock], clock: LamportClock) extends CmRDT[AntidoteDWFlagOp, AntidoteDWFlagMsg, AntidoteDWFlag] {
  def enabled(): Boolean =
    this.disableTokens.isEmpty() && this.enableTokens.nonEmpty()

  def enable(): AntidoteDWFlagMsg = {
    val uniqueToken = this.clock.increment()
    new AntidoteDWFlagMsg(this.enableTokens.union(this.disableTokens), new Set[LamportClock]().add(uniqueToken), new Set[LamportClock](), uniqueToken)
  }

  def disable(): AntidoteDWFlagMsg = {
    val uniqueToken = this.clock.increment()
    new AntidoteDWFlagMsg(this.enableTokens.union(this.disableTokens), new Set[LamportClock](), new Set[LamportClock]().add(uniqueToken), uniqueToken)
  }

  def prepare(op: AntidoteDWFlagOp): AntidoteDWFlagMsg = op match {
    case Enable() => this.enable()
    case Disable() => this.disable()
  }

  def effect(msg: AntidoteDWFlagMsg): AntidoteDWFlag = {
    val finalEnableTokens = this.enableTokens.union(msg.newEnableTokens).diff(msg.seenTokens)
    val finalDisableTokens = this.disableTokens.union(msg.newDisableTokens).diff(msg.seenTokens)
    val newClock = this.clock.sync(msg.timestamp)
    new AntidoteDWFlag(finalEnableTokens, finalDisableTokens, newClock)
  }

  override def reachable(): Boolean = {
    this.clock.counter >= 0
  }

  private def tokensNotFromFuture(tokens: Set[LamportClock], clock: LamportClock): Boolean = {
    tokens.forall((token: LamportClock) => {
      val replica = token.replica
      if (replica == clock.replica)
        token.counter < clock.counter
      else
        true
    })
  }

  override def compatibleS(that: AntidoteDWFlag): Boolean = {
    (this.clock.replica != that.clock.replica) &&
    // no replica has observed tokens from the future
    this.tokensNotFromFuture(this.enableTokens, that.clock) &&
    this.tokensNotFromFuture(this.disableTokens, that.clock) &&
    that.tokensNotFromFuture(that.enableTokens, this.clock) &&
    that.tokensNotFromFuture(that.disableTokens, this.clock)
  }

  override def equals(that: AntidoteDWFlag) =
    this.enabled() == that.enabled()
}

object AntidoteDWFlag extends CmRDTProof[AntidoteDWFlagOp, AntidoteDWFlagMsg, AntidoteDWFlag]
