import org.verifx.crdtproofs.lemmas.CvRDT
import org.verifx.crdtproofs.lemmas.CvRDTProof2
import org.verifx.crdtproofs.LamportClock

/*
 * Implementation of a unique identifier.
 * Keeps a replica ID (which must be unique!) and a counter that is local to the replica.
 */
class Tag[ID](replica: ID, counter: Int)

/*
 * Implementation of a state-based OR-Set as described in:
 * "Marc Shapiro. Replicated Data Types. Liu, Ling; Ã–zsu, M. Tamer. Encyclopedia Of Database Systems, Replicated Data Types, Springer-Verlag, pp.1-5, 2017."
 */
class ORSet2[V, ID](myID: ID,
                    counter: Int = 0,
                    observed: Set[Tuple[V, Tag[ID]]] = new Set[Tuple[V, Tag[ID]]],
                    removed: Set[Tuple[V, Tag[ID]]] = new Set[Tuple[V, Tag[ID]]]) extends CvRDT[ORSet2[V, ID]] {
  // Removed elements cannot occur in the observed set
  override def reachable(): Boolean =
    this.observed.intersect(this.removed).isEmpty()

  def contains(e: V) =
    this.observed.exists((t: Tuple[V, Tag[ID]]) => t.fst == e)

  def add(e: V) = {
    val tag = new Tag(this.myID, this.counter + 1)
    val tup = new Tuple(e, tag)
    new ORSet2(this.myID, this.counter + 1, this.observed.add(tup), this.removed)
  }

  def remove(e: V) = {
    val observedTags = this.observed.filter((t: Tuple[V, Tag[ID]]) => t.fst == e)
    val newObserved = this.observed.diff(observedTags)
    val newRemoved = this.removed.union(observedTags)
    new ORSet2(this.myID, this.counter, newObserved, newRemoved)
  }

  def merge(that: ORSet2[V, ID]) = {
    val mergedObserved = this.observed.diff(that.removed).union(that.observed.diff(this.removed))
    val mergedRemoved = this.removed.union(that.removed)
    new ORSet2(this.myID, this.counter, mergedObserved, mergedRemoved)
  }

  def compare(that: ORSet2[V, ID]) = {
    this.observed.subsetOf(that.observed) &&
    this.removed.subsetOf(that.removed)
  }
}

object ORSet2 extends CvRDTProof2[ORSet2]
