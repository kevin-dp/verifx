import org.verifx.crdtproofs.lemmas.CvRDT
import org.verifx.crdtproofs.lemmas.CvRDTProof1
import org.verifx.crdtproofs.sets.GSet
import org.verifx.crdtproofs.sets.TwoPSetSB
import org.verifx.crdtproofs.graphs.Edge

/*
 * State-based implementation of an Add-Remove Partial Order CRDT.
 * Supports addition of a vertex between two other vertices and removal of vertices.
 */

class AddRemovePartialOrderSB[V](vertices: TwoPSetSB[V], edges: GSet[Edge[V]]) extends CvRDT[AddRemovePartialOrderSB[V]] {
  def hasVertex(vertex: V) =
    this.vertices.lookup(vertex)

  def preBefore(a: V, b: V) = {
    this.hasVertex(a) && this.hasVertex(b)
  }

  // True if `a` is before `b` in the partial order,
  // i.e. there is a path from `a` to `b`.
  // Note that this method is not tail recursive so it will quickly blow up the stack
  @recursive
  def before(a: V, b: V): Boolean = {
    // is there a direct edge between them?
    this.edges.lookup(new Edge(a, b)) ||
    // or, can we make 1 step and reach `b` from there?
    this.edges.exists((edge: Edge[V]) => {
      a == edge.from &&
      this.before(edge.to, b)
    })
  }

  def preAddBetween(u: V, v: V, w: V) = {
    this.hasVertex(u) && this.hasVertex(w)
  }

  def addBetween(u: V, v: V, w: V) = {
    new AddRemovePartialOrderSB(
      this.vertices.add(v),
      this.edges.add(new Edge(u, v)).add(new Edge(v, w))
    )
  }

  def preRemove(v: V) = {
    this.hasVertex(v)
  }

  def remove(v: V) = {
    new AddRemovePartialOrderSB(
      this.vertices.remove(v),
      this.edges
    )
  }

  def merge(that: AddRemovePartialOrderSB[V]) = {
    new AddRemovePartialOrderSB(
      this.vertices.merge(that.vertices),
      this.edges.merge(that.edges)
    )
  }

  def compare(that: AddRemovePartialOrderSB[V]) = {
    this.vertices.compare(that.vertices) &&
    this.edges.compare(that.edges)
  }
}

object AddRemovePartialOrderSB extends CvRDTProof1[AddRemovePartialOrderSB]
