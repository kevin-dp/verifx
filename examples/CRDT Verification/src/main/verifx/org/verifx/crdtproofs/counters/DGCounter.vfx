import org.verifx.crdtproofs.lemmas.CvRDT
import org.verifx.crdtproofs.lemmas.CvRDTProof1

/*
 * Implementation of a Dynamic Grow-Only Counter.
 * This design supports a dynamic number of replicas and is similar to the one used in Riak.
 * It differs from the original Grow-Only Counter CRDT which assumes a fixed number of replicas.
 */

class DGCounter[ID](counts: Map[ID, Int] = new Map[ID, Int]()) extends CvRDT[DGCounter[ID]] {
  def increment(replica: ID) = {
    val count = this.counts.getOrElse(replica, 0)
    new DGCounter(this.counts.add(replica, count + 1))
  }

  @recursive
  private def sumVector(v: Vector[Int], sum: Int = 0, replica: Int = 0): Int = {
    if (replica >= 0 && replica < v.size) {
      val count = v.get(replica)
      this.sumVector(v, sum + count, replica + 1)
    }
    else
      sum
  }

  def value(replicas: Vector[ID]): Int = {
    val counts = replicas.map((replica: ID) => this.counts.getOrElse(replica, 0))
    this.sumVector(counts)
  }

  def merge(that: DGCounter[ID]) = {
    val max = (x: Int, y: Int) => if (x >= y) x else y
    val mergedCounts = this.counts.combine(that.counts, max)
    new DGCounter(mergedCounts)
  }

  def compare(that: DGCounter[ID]) = false // not used because we override `equals`
  override def equals(that: DGCounter[ID]) = this == that
}

object DGCounter extends CvRDTProof1[DGCounter]
