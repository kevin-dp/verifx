import org.verifx.crdtproofs.lemmas.DeltaCRDT
import org.verifx.crdtproofs.lemmas.CvRDTProof1

/*
 * Implementation of a lexicographic counter which is inspired by cassandra.
 * The implementation is based on the C++ implementation below:
 *  https://github.com/CBaquero/delta-enabled-crdts/blob/master/delta-crdts.cc
 */

class LexCounter[ID](m: Map[ID, Tuple[Int, Int]] = new Map[ID, Tuple[Int, Int]]()) extends DeltaCRDT[LexCounter[ID]] {
  def inc(amount: Int, replica: ID) = {
    val emptyMap = new Map[ID, Tuple[Int, Int]]()
    val tuple = this.m.getOrElse(replica, new Tuple(0, 0))
    val incrementedTuple = new Tuple(tuple.fst, tuple.snd + amount)
    val incrementedMap = emptyMap.add(replica, incrementedTuple)
    new LexCounter(incrementedMap)
  }

  def dec(amount: Int, replica: ID) = {
    val emptyMap = new Map[ID, Tuple[Int, Int]]()
    val tuple = this.m.getOrElse(replica, new Tuple(0, 0))
    val decrementedTuple = new Tuple(tuple.fst + 1, tuple.snd - amount)
    val decrementedMap = emptyMap.add(replica, decrementedTuple)
    new LexCounter(decrementedMap)
  }

  private def join(x: Int, y: Int) =
    if (x > y) x else y

  private def lexjoin(l: Tuple[Int, Int], r: Tuple[Int, Int]) = {
    if (r == l)
      r
    else if (l.fst > r.fst)
      l
    else if (r.fst > l.fst)
      r
    else // So r.fst == l.fst
      new Tuple(r.fst, this.join(r.snd, l.snd))
  }

  def merge(delta: LexCounter[ID]) =
    new LexCounter(
      delta.m.combine(this.m, this.lexjoin _))
}

object LexCounter extends CvRDTProof1[LexCounter]
