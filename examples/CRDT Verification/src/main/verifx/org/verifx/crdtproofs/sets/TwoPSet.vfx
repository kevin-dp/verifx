import org.verifx.crdtproofs.lemmas.CmRDT
import org.verifx.crdtproofs.lemmas.CmRDTProof1

object Op {
  enum SetOp[V] {
    Add(e: V) | Remove(e: V)
  }
}

class TwoPSet[V](added: Set[V] = new Set[V](), removed: Set[V] = new Set[V]()) extends CmRDT[SetOp[V], SetOp[V], TwoPSet[V]] {
  def lookup(element: V) = this.added.contains(element) && !this.removed.contains(element)
  def add(element: V) = new TwoPSet(this.added.add(element), this.removed)

  def preRemove(element: V) = this.lookup(element)
  def remove(element: V) = new TwoPSet(this.added, this.removed.add(element))

  override def enabledSrc(op: SetOp[V]) = op match {
    case Add(e) => true // no precondition for `add`
    case Remove(e) => this.preRemove(e)
  }

  def prepare(op: SetOp[V]) = op

  def effect(op: SetOp[V]) = op match {
    case Add(e) => this.add(e)
    case Remove(e) => this.remove(e)
  }

  // The `forall` method checks that the given predicate holds for all elements that are in the set
  // This method is used by TwoPTwoPGraph
  def forall(f: V => Boolean) =
    this.added.diff(this.removed).forall(f)

  // This method is used by RGA
  def filter(f: V => Boolean) =
    this.added.diff(this.removed).filter(f)
}

object TwoPSet extends CmRDTProof1[SetOp, SetOp, TwoPSet]
