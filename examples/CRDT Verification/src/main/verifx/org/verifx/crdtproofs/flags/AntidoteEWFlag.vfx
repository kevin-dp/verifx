import org.verifx.crdtproofs.LamportClock
import org.verifx.crdtproofs.lemmas.CmRDTProof

object AntidoteEWFlag {
  enum AntidoteEWFlagOp {
    Enable() | Disable()
  }
}

class AntidoteEWFlagMsg(seenTokens: Set[LamportClock], newTokens: Set[LamportClock], timestamp: LamportClock)

/*
 * Implementation of the Antidote EW-Flag.
 * This implementation assumes that every replica has a unique ID
 * and uses a Lamport clock to generate unique tokens.
 * The Antidote implementation does its best to generate unique tokens by generating some random bytes.
 */
class AntidoteEWFlag(tokens: Set[LamportClock], clock: LamportClock) extends CmRDT[AntidoteEWFlagOp, AntidoteEWFlagMsg, AntidoteEWFlag] {
  def enabled(): Boolean = this.tokens.nonEmpty()

  def enable(): AntidoteEWFlagMsg = {
    val uniqueToken = this.clock.increment()
    new AntidoteEWFlagMsg(this.tokens, new Set[LamportClock]().add(uniqueToken), uniqueToken)
  }

  def disable(): AntidoteEWFlagMsg =
    new AntidoteEWFlagMsg(this.tokens, new Set[LamportClock](), this.clock)

  def prepare(op: AntidoteEWFlagOp): AntidoteEWFlagMsg = op match {
    case Enable() => this.enable()
    case Disable() => this.disable()
  }

  def effect(msg: AntidoteEWFlagMsg): AntidoteEWFlag = {
    val finalTokens = this.tokens.union(msg.newTokens).diff(msg.seenTokens)
    val newClock = this.clock.sync(msg.timestamp)
    new AntidoteEWFlag(finalTokens, newClock)
  }

  override def reachable(): Boolean = {
    this.clock.counter >= 0
  }

  private def tokensNotFromFuture(that: AntidoteEWFlag): Boolean = {
    this.tokens.forall((token: LamportClock) => {
      val replica = token.replica
      if (replica == that.clock.replica)
        token.counter < that.clock.counter
      else
        true
    })
  }

  override def compatibleS(that: AntidoteEWFlag): Boolean = {
    (this.clock.replica != that.clock.replica) &&
    // no replica has observed tokens from the future
    this.tokensNotFromFuture(that) &&
    that.tokensNotFromFuture(this)
  }

  override def equals(that: AntidoteEWFlag) =
    this.enabled() == that.enabled()
}

object AntidoteEWFlag extends CmRDTProof[AntidoteEWFlagOp, AntidoteEWFlagMsg, AntidoteEWFlag]
