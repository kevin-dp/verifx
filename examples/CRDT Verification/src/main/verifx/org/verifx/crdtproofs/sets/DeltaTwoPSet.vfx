import org.verifx.crdtproofs.lemmas.DeltaCRDT
import org.verifx.crdtproofs.lemmas.CvRDTProof1

class DeltaTwoPSet[V](set: Set[V] = new Set[V](), tombstones: Set[V] = new Set[V]()) extends DeltaCRDT[DeltaTwoPSet[V]] {
  override def reachable() = {
    // an element cannot be in `set` and in `tombstones`
    // because we remove them from `set` when adding them to the tombstones.
    this.set.intersect(this.tombstones).isEmpty()
  }

  def add(v: V) = {
    if (this.tombstones.contains(v)) {
      // Don't add it
      new DeltaTwoPSet(new Set[V](), new Set[V]())
    }
    else {
      // add it
      new DeltaTwoPSet(new Set[V]().add(v), new Set[V]()) // delta containing only the added element
    }
  }

  def remove(v: V) =
    new DeltaTwoPSet(new Set[V](), new Set[V]().add(v)) // delta containing a tombstone for `v`

  def contains(v: V) =
    this.set.contains(v)

  def merge(delta: DeltaTwoPSet[V]) = {
    // add the tombstones of the delta
    val joinedTombstones = this.tombstones.union(delta.tombstones)
    // remove the elements that are tombstoned in the delta
    val newSet = this.set.filter((v: V) => !delta.tombstones.contains(v))
    // add delta values if not tombstoned
    val deltaValues = delta.set.filter((v: V) => !this.tombstones.contains(v))
    val newValues = newSet.union(deltaValues)
    new DeltaTwoPSet(newValues, joinedTombstones)
  }
}

object DeltaTwoPSet extends CvRDTProof1[DeltaTwoPSet]
