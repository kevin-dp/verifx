import org.verifx.crdtproofs.pure.PureOpBasedCRDT

trait PureCRDTProof1[Op[A], T[A] <: PureOpBasedCRDT[Op[A], T[A]]] {
  proof is_a_CmRDT[S] {
    forall (s: T[S], x: Op[S], timeX: VersionVector, y: Op[S], timeY: VersionVector) {
      // The operations must be concurrent
      /*( s1.equals(s2) && timeX.concurrent(timeY) ) =>: {
        // The effectors must commute
        s1.effect(x, timeX).effect(y, timeY).equals(s2.effect(y, timeY).effect(x, timeX))
      }*/
      timeX.concurrent(timeY) =>: {
        // The effectors must commute
        s.effect(x, timeX).effect(y, timeY).equals(s.effect(y, timeY).effect(x, timeX))
      }
    }
  }
}
