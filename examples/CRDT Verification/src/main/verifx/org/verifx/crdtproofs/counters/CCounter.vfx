import org.verifx.crdtproofs.delta.DotKernel
import org.verifx.crdtproofs.lemmas.DeltaCRDT
import org.verifx.crdtproofs.lemmas.CvRDTProof1

class CCounter[ID](dk: DotKernel[Int, ID] = new DotKernel[Int, ID]()) extends DeltaCRDT[CCounter[ID]] {
  private def updateKernel(amount: Int, replica: ID, incOrDec: (Int, Int) => Int) = {
    // if set of dots to remove is empty, then create one (replica, 0)
    val dotsToRmv = this.dk.dots.filter((dottedVal: DottedValue[Int, ID]) => dottedVal.dot.replica == replica) // set of dots to remove, there should be only 1

    if (dotsToRmv.isEmpty()) {
      // no dots to remove, so create a dot and add it
      new CCounter(
        this.dk.merge(this.dk.add(new Dot(replica, 1), incOrDec(0, amount)))
      )
    }
    else {
      val getDot = (v: DottedValue[Int, ID]) => v.dot
      val incrementedValues = dotsToRmv.map((dottedVal: DottedValue[Int, ID]) => new DottedValue(new Dot(dottedVal.dot.replica, dottedVal.dot.count + 1), incOrDec(dottedVal.value, amount)))
      val removedKernel = this.dk.merge(this.dk.rmvDots(dotsToRmv.map(getDot)))
      val updatedKernel = removedKernel.merge(this.dk.addSeveral(incrementedValues))
      new CCounter(updatedKernel)
    }
  }

  private def plus(count: Int, amnt: Int) = count + amnt
  private def minus(count: Int, amnt: Int) = count - amnt

  def inc(amount: Int, replica: ID) =
    this.updateKernel(amount, replica, this.plus _)

  def dec(amount: Int, replica: ID) =
    this.updateKernel(amount, replica, this.minus _)

  // Returns the increments by of the different replicas
  // the actual counter value is the sum of those increments
  def value() =
    this.dk.dots.map((dottedVal: DottedValue[Int, ID]) => dottedVal.value)

  def merge(delta: CCounter[ID]) =
    new CCounter(this.dk.merge(delta.dk))
}

object CCounter extends CvRDTProof1[CCounter]
