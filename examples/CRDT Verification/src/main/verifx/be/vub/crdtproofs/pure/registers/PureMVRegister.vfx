import be.vub.crdtproofs.VersionVector
import be.vub.crdtproofs.pure.PureOpBasedCRDT
import be.vub.crdtproofs.lemmas.PureCRDTProof1

/*
 * Implementation of a pure op-based Multi-Value Register CRDT.
 * Supports 2 update operations and 1 query operation:
 * - write(value)
 * - clear()
 * - read(): returns all values that are not overridden by a causally later write or clear operation
 */

object MVRegisterOps {
  enum MVRegisterOp[V] {
    Write(value: V) | Clear()
  }
}

class PureMVRegister[V](polog: Set[TaggedOp[MVRegisterOp[V]]] = new Set[TaggedOp[MVRegisterOp[V]]]()) extends PureOpBasedCRDT[MVRegisterOp[V], PureMVRegister[V]] {
  def copy(newPolog: Set[TaggedOp[MVRegisterOp[V]]]) =
    new PureMVRegister(newPolog)

  def selfRedundant(op: TaggedOp[MVRegisterOp[V]]): Boolean =
    op.o == new Clear[V]()

  def redundantBy(x: TaggedOp[MVRegisterOp[V]], y: TaggedOp[MVRegisterOp[V]]): Boolean =
    x.t.before(y.t)

  def read(): Set[V] = this.polog.map((taggedOp: TaggedOp[MVRegisterOp[V]]) => taggedOp.o.asInstanceOf[Write[V]].value)
}

object PureMVRegister extends PureCRDTProof1[MVRegisterOp, PureMVRegister] {
  proof PureMVRegister_works[V] {
    forall(t1: VersionVector, t2: VersionVector, t3: VersionVector, t4: VersionVector, t5: VersionVector) {
      (t1.before(t2) && t1.before(t3) && t2.concurrent(t3) && t2.before(t4) && t3.concurrent(t4) && t3.before(t5) && t4.before(t5)) =>: {
        val reg = new PureMVRegister[String]()
        val reg2 = reg.effect(new Write("foo"), t1)
        val regConc = reg2.effect(new Write("bar"), t2).effect(new Write("baz"), t3)
        val regOverridden = regConc.effect(new Write("boom"), t4)
        val regOverridden2 = regOverridden.effect(new Write("final"), t5)
        val emptySet = new Set[String]()

        reg.read() == emptySet &&
        reg2.read() == emptySet.add("foo") &&
        regConc.read() == emptySet.add("bar").add("baz") &&
        regOverridden.read() == emptySet.add("baz").add("boom") &&
        regOverridden2.read() == emptySet.add("final")
      }
    }
  }
}
