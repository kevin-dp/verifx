import be.vub.crdtproofs.VersionVector
import be.vub.crdtproofs.pure.TaggedOp

/*
 * Implementation of the pure op-based CRDT framework.
 * Provides a default implementation for the generic prepare and effect functions.
 * We do not implement the prepare phase because it doesn't do anything (it just returns the operation it gets as input).
 * So we can immediately pass the operation (together with its timestamp which we get from the RCB layer) to the effect function.
 */

trait PureOpBasedCRDT[Op, T <: PureOpBasedCRDT[Op, T]] {
  val polog: Set[TaggedOp[Op]] // state is a set of tagged operations

  // Returns a copy with the updated polog
  def copy(newPolog: Set[TaggedOp[Op]]): T

  // data-type specific implementation of the R relation
  // that indicates that an incoming operation is itself redundant
  // and does not need to be stored in the PO-Log
  def selfRedundant(op: TaggedOp[Op]): Boolean

  // data-type specific implementation of the R_ relation
  // that indicates that an existing operation `x âˆˆ polog` becomes
  // redundant by the incoming operation `y`
  // We do not implement the R_1 and R_2 relations
  // because all examples provided in the paper use R_
  def redundantBy(x: TaggedOp[Op], y: TaggedOp[Op]): Boolean

  // Generic effect function that returns the new PO-Log
  // In practice, we get the timestamp for the underlying Reliable Causal Broadcast layer.
  // effect(o, t, s) = {(t, o) | (t, o) !R s} U { x in s | x !R_ (t, o) }
  def effect(o: Op, t: VersionVector): T = {
    val taggedOp = new TaggedOp(t, o)
    // polog without the operations that are made redundant by the incoming `taggedOp`,
    // i.e. { x in s | x !R_ (t, o) }
    val prunedPolog = this.polog.filter((x: TaggedOp[Op]) => !this.redundantBy(x, taggedOp))

    val newPolog: Set[TaggedOp[Op]] =
      if (this.selfRedundant(taggedOp)) {
        // Do not store `taggedOp` in the PO-Log
        prunedPolog
      }
      else {
        // Store `taggedOp` in the PO-Log
        prunedPolog.add(taggedOp)
      }

    this.copy(newPolog)
  }

  def equals(that: T): Boolean = {
    this == that
  }
}
