import be.vub.crdtproofs.VersionVector
import be.vub.crdtproofs.pure.PureOpBasedCRDT
import be.vub.crdtproofs.lemmas.PureCRDTProof1
import be.vub.crdtproofs.pure.sets.SetOp

/*
 * Implementation of a pure op-based remove-wins set CRDT,
 * following the specification from figure 18 in:
 *   Baquero, Carlos, Paulo SÃ©rgio Almeida, and Ali Shoker.
 *   "Pure operation-based replicated data types."
 *   arXiv preprint arXiv:1710.04469 (2017).
 *
 * Supports three operations:
 * - add(x): adds element `x` to the set
 * - rmv(x): removes element `x` from the set
 * - clear: clears the entire set
 *
 * Only `add(x)` operations are stored in the PO-Log
 * because `clear` and `remove` are self redundant.
 */

object MaybeE {
  enum Maybe[T] {
    Just(x: T) | Nothingg()
  }
}

class PureRWSet[V](polog: Set[TaggedOp[SetOp[V]]]) extends PureOpBasedCRDT[SetOp[V], PureRWSet[V]] {
  def copy(newPolog: Set[TaggedOp[SetOp[V]]]) =
    new PureRWSet(newPolog)

  def selfRedundant(op: TaggedOp[SetOp[V]]): Boolean =
    op.o == new Clear[V]()

  private def getElem(op: SetOp[V]): Maybe[V] = op match {
    case _: Clear[V] => new Nothingg[V]()
    case Add(elem) => new Just(elem)
    case Rmv(elem) => new Just(elem)
  }

  def redundantBy(x: TaggedOp[SetOp[V]], y: TaggedOp[SetOp[V]]): Boolean = {
    x.t.before(y.t) &&
    (y.o match {
       case _: Clear[V] => true
       case _ => this.getElem(y.o) == this.getElem(x.o)
     })
  }

  def contains(elem: V): Boolean = {
    this.polog.exists((op: TaggedOp[SetOp[V]]) => op.o match {
      case Add(e) => e == elem
      case _ => false
    }) &&
    !this.polog.exists((op: TaggedOp[SetOp[V]]) => op.o match {
      case Rmv(e) => e == elem
      case _ => false
    })
  }
}

object PureRWSet extends PureCRDTProof1[SetOp, PureRWSet]
