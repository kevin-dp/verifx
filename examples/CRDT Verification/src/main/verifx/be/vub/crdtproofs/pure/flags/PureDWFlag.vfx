import be.vub.crdtproofs.VersionVector
import be.vub.crdtproofs.pure.PureOpBasedCRDT
import be.vub.crdtproofs.lemmas.PureCRDTProof
import be.vub.crdtproofs.pure.flags.FlagOp

/*
 * Pure op-based Disable-Wins Flag CRDT.
 * Supported operations are:
 * - enable
 * - disable
 * - clear
 *
 * Disable wins over concurrent enable and clear operations.
 * Enable wins over concurrent clear operations.
 */

class PureDWFlag(polog: Set[TaggedOp[FlagOp]] = new Set[TaggedOp[FlagOp]]()) extends PureOpBasedCRDT[FlagOp, PureDWFlag] {
  def selfRedundant(op: TaggedOp[FlagOp]): Boolean =
    op.o == new Clear()

  def redundantBy(x: TaggedOp[FlagOp], y: TaggedOp[FlagOp]): Boolean =
    x.t.before(y.t)

  def copy(newPolog: Set[TaggedOp[FlagOp]]): PureDWFlag = new PureDWFlag(newPolog)

  // Query method
  def read(): Boolean = {
    this.polog.exists((op: TaggedOp[FlagOp]) => op.o == new Enable()) &&
    !this.polog.exists((op: TaggedOp[FlagOp]) => op.o == new Disable())
  }
}

object PureDWFlag extends PureCRDTProof[FlagOp, PureDWFlag]
