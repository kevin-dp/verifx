import be.vub.crdtproofs.lemmas.CmRDT
import be.vub.crdtproofs.lemmas.CmRDTProof1
import be.vub.crdtproofs.sets.TwoPSet
import be.vub.crdtproofs.graphs.Edge

/*
 * Implementation of a 2P2P-Graph CRDT.
 * Keeps a 2P-Set of vertices and a 2P-Set of edges.
 * Since it uses 2P-Sets removed vertices/edges cannot be added again.
 * An edge is considered in the graph if its vertices are in the graph and the edge between them is in the graph.
 * As a result, if a vertex V1 is removed while concurrently an edge V1 -> V2 is added,
 * the remove operation will win and the edge V1 -> V2 will no longer be in the graph since V1 is no longer in the graph.
 */

object Op {
  enum GraphOp[V] {
    AddVertex(vertex: V) | AddEdge(from: V, to: V) |
    RemoveVertex(vertex: V) | RemoveEdge(edge: Edge[V])
  }
}

class TwoPTwoPGraph[V](vertices: TwoPSet[V] = new TwoPSet[V](),
                       edges:    TwoPSet[Edge[V]] = new TwoPSet[Edge[V]]()) extends CmRDT[GraphOp[V], GraphOp[V], TwoPTwoPGraph[V]] {

  override def reachable() = {
    // A graph is valid iff E ⊆ V × V
    // i.e. there can only be edges between existing vertices
    this.edges.forall((edge: Edge[V]) => {
      if (this.hasEdge(edge))
        this.hasVertex(edge.from) && this.hasVertex(edge.to)
      else
        true
    })
  }

  def hasVertex(vertex: V) =
    this.vertices.lookup(vertex)

  def hasEdge(edge: Edge[V]) = {
    this.vertices.lookup(edge.from) &&
    this.vertices.lookup(edge.to) &&
    this.edges.lookup(edge)
  }

  def addVertex(vertex: V) =
    new TwoPTwoPGraph(this.vertices.add(vertex), this.edges)

  def preAddEdge(from: V, to: V) =
    this.hasVertex(from) && this.hasVertex(to)

  def addEdge(from: V, to: V) =
    new TwoPTwoPGraph(this.vertices, this.edges.add(new Edge(from, to)))

  def preRemoveVertex(vertex: V) = {
    this.hasVertex(vertex) &&
    // graph precondition E ⊆ V×V (E is a subset of V x V)
    // i.e. we may not remove a vertex that has one or more incoming or outgoing edges
    this.edges.forall((edge: Edge[V]) => edge.from != vertex && edge.to != vertex)
  }

  def removeVertex(vertex: V) =
    new TwoPTwoPGraph(this.vertices.remove(vertex), this.edges)

  def preRemoveEdge(edge: Edge[V]) =
    this.hasEdge(edge)

  def removeEdge(edge: Edge[V]) =
    new TwoPTwoPGraph(this.vertices, this.edges.remove(edge))

  override def enabledSrc(op: GraphOp[V]) = op match {
    case AddVertex(vertex) => true // `addVertex` does not have a source precondition
    case AddEdge(from, to) => this.preAddEdge(from, to)
    case RemoveVertex(vertex) => this.preRemoveVertex(vertex)
    case RemoveEdge(edge) => this.preRemoveEdge(edge)
  }

  def prepare(op: GraphOp[V]) = op // prepare phase does not add extra information

  def effect(op: GraphOp[V]) = op match {
    case AddVertex(vertex) => this.addVertex(vertex)
    case AddEdge(from, to) => this.addEdge(from, to)
    case RemoveVertex(vertex) => this.removeVertex(vertex)
    case RemoveEdge(edge) => this.removeEdge(edge)
  }
}

object TwoPTwoPGraph extends CmRDTProof1[GraphOp, GraphOp, TwoPTwoPGraph]
