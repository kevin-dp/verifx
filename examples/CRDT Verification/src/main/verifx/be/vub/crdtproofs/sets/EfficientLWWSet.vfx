import be.vub.crdtproofs.lemmas.CvRDT
import be.vub.crdtproofs.lemmas.CvRDTProof1
import be.vub.crdtproofs.VersionVector

/*
 * Implementation of an optimized Last-Writer-Wins Set that consumes less space.
 * This implementation replaces the `adds` and `removes` sets by maps.
 * `adds` and `removes` map elements to the timestamp of the latest add/remove operation.
 * The merge function merges the `adds` sets and the `removes` sets by synchronizing the clocks.
 * This ensures convergence because synchronizing version vectors is commutative (i.e. `vv1.sync(vv2) == vv2.sync(vv1)`).
 * This implementation is more efficient because it keeps maximum 2 timestamps for each element (the timestamp of the latest add and the timestamp of the latest remove).
 */
class EfficientLWWSet[V](adds: Map[V, VersionVector] = new Map[V, VersionVector](),
                         removes: Map[V, VersionVector] = new Map[V, VersionVector]()) extends CvRDT[EfficientLWWSet[V]] {

  def add(element: V, timestamp: VersionVector) = {
    val updatedAdds = this.adds.add(element, timestamp)
    new EfficientLWWSet(updatedAdds, this.removes)
  }

  def remove(element: V, timestamp: VersionVector) = {
    val updatedRemoves = this.removes.add(element, timestamp)
    new EfficientLWWSet(this.adds, updatedRemoves)
  }

  def lookup(element: V) = {
  /*this.adds.get(element) match {
    case None() => false
    case Some(addedTime) => this.removes.get(element) match {
      case None() => true
      case Some(removedTime) =>
        // if the element is in both maps, then the latest remove operation may not have happened after the latest add
        !removedTime.after(addedTime)
    }
    */

    this.adds.contains(element) &&
    (!this.removes.contains(element) ||
    // if the element is in both maps, then the latest remove operation may not have happened after the latest add
    !this.removes.get(element).after(this.adds.get(element)))
  }

  def merge(that: EfficientLWWSet[V]) = {
    val syncClocks = (vv1: VersionVector, vv2: VersionVector) => vv1.sync(vv2)
    val mergedAdds = this.adds.combine(that.adds, syncClocks)
    val mergedRemoves = this.removes.combine(that.removes, syncClocks)

    new EfficientLWWSet(mergedAdds, mergedRemoves)
  }

  private def compareVersionVectors(x: Map[V, VersionVector], y: Map[V, VersionVector]) = {
    x.zip(y)
     .values()
     .forall((vvs: Tuple[VersionVector, VersionVector]) => vvs.fst.beforeOrEqual(vvs.snd))
  }

  def compare(that: EfficientLWWSet[V]) = {
    // `that` observed all the keys we observed
    this.adds.keys().subsetOf(that.adds.keys()) &&
    this.removes.keys().subsetOf(that.removes.keys()) &&
    // and all the version vectors of `that` are later or equal to ours
    this.compareVersionVectors(this.adds, that.adds) &&
    this.compareVersionVectors(this.removes, that.removes)
  }
}

object EfficientLWWSet extends CvRDTProof1[EfficientLWWSet]
